void init_timer_2(void)

{

RCC->AHBENR |= RCC_AHBENR_GPIOBEN;// enable clock for GPIOB peripheral

GPIOB->MODER |= GPIO_MODER_MODER10_1;//sets pin PB10 to alternate function mode

GPIOB->AFR[1] |= (2 << 2*4);// set the alternate function for PB10 to TIM2_CH3, which means that it will output the PWM signal generated by Timer 2.

RCC->APB1ENR |= RCC_APB1ENR_TIM2EN;//enable the clock for Timer 2

TIM2->PSC = 2;//set the prescaler value for Timer 2 to 2

TIM2->ARR = 1023;//set the value of the auto-reload register (ARR) for Timer 2 to 1023

TIM2->CCMR2 |= TIM_CCMR2_OC3M_2 | TIM_CCMR2_OC3M_1 | TIM_CCMR2_OC3PE;//Configure the capture/compare mode register (CCMR) for channel 3 of Timer 2 to output mode 1 with preload enabled

TIM2->CCER |= TIM_CCER_CC3E;//enable the capture/compare output for channel 3 of Timer 2

TIM2->CR1 |= TIM_CR1_CEN;//enable the counter for Timer 2

TIM2->CCR3 = 1023 / 4;//Set the value of the capture/compare register (CCR) for channel 3 of Timer 2 to 1023 divided by 4, which is 256. This corresponds to a duty cycle of 25% for the PWM signal,

}
